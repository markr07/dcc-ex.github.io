.. include:: /include/include.rst
.. include:: /include/include-l3.rst
.. include:: /include/include-description.rst
|EX-CONTRIBUTING-LOGO|

*******************************
Documentation - Getting Started
*******************************

|SUITABLE| |conductor| |tinkerer| |engineer|

.. sidebar::
   :class: sidebar-on-this-page

   .. contents:: On this page
      :depth: 3
      :local:

This page aims to provide the information required to help people contribute to our documentation.

If what is outlined in this page is too involved, and you simply wish to provide some content that we can add, clarify, or update, then simply get in touch with us via the :doc:`/support/index` page and we can help you out.

Required Software
=================

Refer to the :doc:`/about/contributing/software` page, in particular the section related to :ref:`about/contributing/software:Python 3.x` and :ref:`VSCode <about/contributing/software:Recommended editor (VSCode)>` for the software necessary to contribute to the documentation.

GitHub Pages, Sphinx, and reStructuredText
==========================================

Our website is hosted courtesy of `GitHub Pages <https://pages.github.com/>`_, is written in `reStructuredText <https://docutils.sourceforge.io/rst.html>`_, with the HTML being generated by `Sphinx <https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html>`_.

reStructuredText is a markdown type language for typesetting documents from websites to PDF or LaTeX documents. Our Website is built upon this technology, so you should make yourself familiar with this by looking through the links provided.

There's a handy `reStructuredText QuickReference Guide <https://docutils.sourceforge.io/docs/user/rst/quickref.html>`_ here.

If you haven't done so already, make sure you are familiar with how we use :doc:`/about/contributing/github` and are familiar with our :doc:`/about/contributing/software`.

GitHub repository and the sphinx branch
---------------------------------------

In order for GitHub pages to function correctly and automatically publish updated content, the content must be located in a specific repository named after the GitHub organisation, and therefore our website repository is `dcc-ex.github.io <https://github.com/DCC-EX/dcc-ex.github.io>`_.

In addition to this, rather than using the main or master branch, the default branch is called "sphinx", so any branches created for contributing to documentation must use this as the parent, and all pull requests must be submitted against this same branch.

|_|

|HR-HEAVY|

Procedure
=========

Procedure overview
-------------------

Ideally the documentation cycle would look like this..

.. figure:: /_static/images/github/github_doc_cycle1.png
   :alt: Ideal GitHub Documentation Cycle
   :scale: 40%

Changes to the original would be pulled down from the original repository directly to your local (PC) repository.  You would push your changes to your GitHub website repository, then create a Pull request to send them to the original for review.

While this is possible, both **GitHub Desktop** and **VSCode** make it extremely cumbersome to do so.

*So instead a slightly longer approach is described below...*

.. figure:: /_static/images/github/github_doc_cycle2.png
   :alt: GitHub Documentation Cycle 
   :scale: 40%

Changes to the original would be pulled down from the original repository to your GitHub Website repository.  Will then pull those changes down to you local (PC) repository.
You will push your changes to your GitHub website repository, then create a Pull Request to send them to the original for review.

There are a number of possible ways to do this but the instructions below are reasonably simple and work:

After installing the required software (**GitHub Desktop** and **VSCode**)...

One time only:

   1. Cloning the repository on the **GitHub website**
   2. Using **GitHub Desktop** to download the repository to your PC

Ongoing:

   3. Opening the repository in **VSCode**
   4. Making your changes
   5. Previewing your changes on your PC
   6. Using **GitHub Desktop** to *push* your changes back to your clone of the Repository on GitHub
   7. Creating a *pull request* to send your changes for review

You will periodically need to update your repository:

    a. Create a pull request on the **GitHub website** to get any changes from the original repository to your repository on GitHub website
    b. Use **GitHub Desktop** to pull the changes to your repository on your PC

One time only
-------------

1. Cloning the repository on GitHub website
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

1. First you will need to create an account on Github if you don't already have one.
2. Go to the original repository ``https://github.com/DCC-EX/dcc-ex.github.io``
3. Click on the :guilabel:`Fork` button and create a new fork.  (Do not alter the Repository name ``dcc-ex.github.io``.)

You will now have a new fork located at ``https://github.com/<your_account_name>/dcc-ex.github.io``.  Take note of this for the next step.


2. Download the repository to your PC with GitHib Desktop
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In **GitHub Desktop**:

1. Select :menuselection:`File --> Clone Repository`
2. Enter the name of you repository ``<your_account_name>/dcc-ex.github.io``
3. Select a location on your PC to store the repository.
4. Click :guilabel:`Clone`
5. Make sure that ``Sphinx`` is selected as the 'Current Branch'

A copy of the repository should now be on the PC.

You can open it in VSCode by selecting ``Repository -> Open in Visual Studio Code``


Ongoing
-------

3. Open the repository in VSCode
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

You can open the repository in VSCode at any time by using ``File -> Open Folder`` and navigating to the folder you selected in step 2.

You can subsequently open the repository in VSCode using ``File -> Open Recent`` and selecting the repository name.

You can subsequently open the repository in VSCode from **GitHub Desktop**.

4. Make you changes
^^^^^^^^^^^^^^^^^^^

You can use the navigation tree on the left to find the file you want to change. Clicking on a file will open it in the edit window.

.. 
   For this section, we are assuming that you are using VSCode with Git installed, allowing the built-in functionality for Git management in VSCode to work.

   To clone the documentation repository, and ensure you are on the correct branch, follow these steps:

   1. In VSCode, either click on the Source Control icon in the left pane, or press <Ctrl> + <Shift> + "g" + "g" (Yes, press "g" twice).
   2. Click the "Clone Repository" button.
   3. Enter the documentation repository URL "https://github.com/DCC-EX/dcc-ex.github.io" then press <Enter>.
   4. Select the appropriate folder on your hard drive to clone it to, then click "Select Repository Location".
   5. The clone will take a minute or two to complete depending on the speed of your computer and internet connection.
   6. Once complete, click "Open".
   7. At the bottom of the window, ensure that the branch "sphinx" is listed beside the Source Control icon.
   8. When you're ready to start editing, click the Source Control or press <Ctrl> + <Shift> +"g" + "g" again.
   9. Click the three dots "..." beside "SOURCE CONTROL" in bold text and select "Checkout to".
   10. Enter a new name for your branch, then click "Create new branch".

   At this point, any editing you do will be on a new branch linked to the parent "sphinx" branch.

   While editing, be sure to save often, stage and commit your changes, and publish them. This way, should anything go wrong with your computer, your work will be saved in GitHub rather than be lost.

5. Live previews
^^^^^^^^^^^^^^^^

Providing you followed the installation guide for VSCode on the :doc:`/about/contributing/software` page accurately, there are three methods available for generating previews as you are editing the reStructuredText code.

Esbonio Language server
~~~~~~~~~~~~~~~~~~~~~~~

This option uses the Esbonio Language server installed along with the reStructuredText extension. This option allows you to quickly preview a page you have been editing, as it continuously generates the preview in the background.

To view the preview you can

* click on the preview button on the top right, or
* Press :guilabel:`<Ctrl>`` + :guilabel:`<Shift>` + :guilabel:`r` and it will open the live preview in a new tab in VSCode. In addition to this method, you can also press :guilabel:`<Ctrl>`` + :guilabel:`k` followed immediately by :guilabel:`<Ctrl>`` + :guilabel:`r`. 

This will generate the live preview in a split pane within VSCode. Every time you save the page you are working on, the live preview will automatically update.

The downside to using this method is that previews are only generated for pages you are actively editing, rather than the entire website. Therefore, prior to submitting any pull requests, it is essential that you follow the build process either as outlined below to emulate the GitHub Pages deployment, or in following section.

This will ensure the entire website is still able to be built successfully after any updates.

Emulate GitHub Pages deployment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The recommended method for local previews of the website documentation is to emulate the GitHub Pages deployment process, as this will not only generate a preview of the content, but will also ensure the same versions of the various Python packages are used to generate the preview, which will highlight any functionality issues arising out of new or different versions.

Right now this can only be done on Windows until a suitable bash script is created for Linux.

1. Open a command prompt.
2. Change to the directory where the "dcc-ex.github.io" repository has been cloned.
3. Run the command "local_deploy.bat".
4. You will need to scroll up to review the output and ensure no errors are reported.
5. The list of installed package versions is also output which is of help if issues are observed when previewing.
6. If any errors have been generated, these must be resolved prior to submitting a pull request.

Once the build of the website completes successfully, preview it locally by opening the main "index.html" file locally in a web browser.

This file can be found in the "docs\\_build\\html" folder within the "dcc-ex.github.io" folder.

Local Sphinx build
~~~~~~~~~~~~~~~~~~

.. :Important:: This requires manually installing a lot of extra libraries, so is not recommended, though is a lot faster than the previous option.

To refresh the entire website while editing, it is necessary to run the equivalent commands that the GitHub publishing workflow runs to ensure no issues have been introduced.

To build the website using Sphinx, follow these steps:

1. Open a command prompt.
2. Change to the directory where the "dcc-ex.github.io" repository has been cloned.
3. Run the command "make clean", review the output and ensure no errors are reported.
4. Run the command "make github", and likewise review the output for errors.
5. If any errors have been generated, these must be resolved prior to submitting a pull request.

Once the build of the website completes successfully, preview it locally by opening the main "index.html" file locally in a web browser.

This file can be found in the "docs\\_build\\html" folder within the "dcc-ex.github.io" folder.

6. Push your changes to your GitHub repository
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

You will need to

* Commit your changes
* Push your changes

In **GitHub Desktop**:

* Open/select the repository
* note and review the changes that have been made
* Add a ``Summary`` of your changes
* Add a ``Description`` of your changes, if the summary is not sufficient
* click :guilabel:`Commit to Sphinx`
* click :guilabel:`Push origin`


7. Creating a *pull request* to send your changes for review
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

1. Open the **GitHub website**
2. open/select your repository ``https://github.com/<your_account_name>/dcc-ex.github.io``

On the 'code' page you should see "This branch is *x* commit(s) ahead of DCC-EX/dcc-ex.github.io:sphinx."

3. click on the `x commit(s) ahead of` hyperlink
5. confirm or add to the title and documentation fields
6. click on the :guilabel:`Create pull request` button

This creates a pull request to be reviewed by the documentation team


Periodic
---------

To see the changes that other people have made to the original repository you need to periodically refresh your repository on both GitHub website and locally 

a. Get any changes to your repository on GitHub website
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

1. Open the **GitHub website**
2. open/select your repository ``https://github.com/<your_account_name>/dcc-ex.github.io``

On the 'code' page you should see "This branch is *x* commit(s) behind DCC-EX/dcc-ex.github.io:sphinx."

If does not say you are 'behind' there is nothing to do.  Stop here.

If you are behind...

3. click on the `x commit(s) behind` hyperlink
5. Add to the title and/or documentation fields.  This does not matter so entering just ``Catchup`` is fine.
6. click on the :guilabel:`Create pull request` button
7. click on the :guilabel:`Merge pull request` button
7. click on the :guilabel:`Confirm merge` button

Any changes are now also in your repository on the GitHub website.


b. Pull the changes to your repository on your PC
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In **GitHub Desktop**:

1. click on the :guilabel:`Fetch origin` button`

Any changes are now also in your repository on PC.


|HR-HEAVY|

Additional
==========

Your own github pages
---------------------

You can optionally, setup *github pages* from you own repository on the GitHub website.  This allows you make changes that *other people* can view before creating a pull request.

1. Open the **GitHub website**
2. open/select your repository ``https://github.com/<your_account_name>/dcc-ex.github.io``
3. Open the ``Settings`` page
4. Select ``Pages`` in the left navigation
5. choose `Deploy from a branch`
6. choose `gh-pages` and `root`
7. click :guilabel:`Save`

This takes time, every time you push any changes but you eventually be able to see your own version of the website at ``https://<your_account_name>.github.io/dcc-ex.github.io/``.

You can see the state of the processing of your changes by looking at the ``Actions`` page.  It will tell you there if there are any errors.
